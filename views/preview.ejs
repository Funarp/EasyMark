<!DOCTYPE html>
<html>

<head>
    <title>
        <%= title %>
    </title>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />

    <!-- CSS  -->
    <link rel="stylesheet" href="../css/editor/style.css" />
    <link rel="stylesheet" href="../css/editor/editormd.preview.css" />

    <style>
        .editormd-html-preview {
            width: 90%;
            margin: 0 auto;
        }
    </style>
</head>

<body>
    <div id="layout">
        <div id="test-editormd-view">
            <textarea style="display:none;" name="test-editormd-markdown-doc"><%= md %></textarea>
        </div>
    </div>

    <script src="../js/jquery.min.js"></script>
    <script src="../js/editor/lib/marked.min.js"></script>
    <script src="../js/editor/lib/prettify.min.js"></script>

    <script src="../js/editor/lib/raphael.min.js"></script>
    <script src="../js/editor/lib/underscore.min.js"></script>
    <script src="../js/editor/lib/sequence-diagram.min.js"></script>
    <script src="../js/editor/lib/flowchart.min.js"></script>
    <script src="../js/editor/lib/jquery.flowchart.min.js"></script>

    <script src="../js/editor/editormd.js"></script>
    <script type="text/javascript">
        $(function() {
            var testEditormdView = editormd.markdownToHTML("test-editormd-view", {
                htmlDecode: "style,script,iframe", // you can filter tags decode
                emoji: true,
                taskList: true,
                tex: true, // 默认不解析
                flowChart: true, // 默认不解析
                sequenceDiagram: true, // 默认不解析
            });
        });
        (function(exports) {
            function urlsToAbsolute(nodeList) {
                if (!nodeList.length) {
                    return [];
                }
                var attrName = 'href';
                if (nodeList[0].__proto__ === HTMLImageElement.prototype ||
                    nodeList[0].__proto__ === HTMLScriptElement.prototype) {
                    attrName = 'src';
                }
                nodeList = [].map.call(nodeList, function(el, i) {
                    var attr = el.getAttribute(attrName);
                    if (!attr) {
                        return;
                    }
                    var absURL = /^(https?|data):/i.test(attr);
                    if (absURL) {
                        return el;
                    } else {
                        return el;
                    }
                });
                return nodeList;
            }

            function screenshotPage() {
                urlsToAbsolute(document.images);
                urlsToAbsolute(document.querySelectorAll("link[rel='stylesheet']"));
                var screenshot = document.documentElement.cloneNode(true);
                var b = document.createElement('base');
                b.href = document.location.protocol + '//' + location.host;
                var head = screenshot.querySelector('head');
                head.insertBefore(b, head.firstChild);
                screenshot.style.pointerEvents = 'none';
                screenshot.style.overflow = 'hidden';
                screenshot.style.webkitUserSelect = 'none';
                screenshot.style.mozUserSelect = 'none';
                screenshot.style.msUserSelect = 'none';
                screenshot.style.oUserSelect = 'none';
                screenshot.style.userSelect = 'none';
                screenshot.dataset.scrollX = window.scrollX;
                screenshot.dataset.scrollY = window.scrollY;
                var script = document.createElement('script');
                script.textContent = '(' + addOnPageLoad_.toString() + ')();';
                screenshot.querySelector('body').appendChild(script);
                var blob = new Blob([screenshot.outerHTML], {
                    type: 'text/html'
                });
                return blob;
            }

            function addOnPageLoad_() {
                window.addEventListener('DOMContentLoaded', function(e) {
                    var scrollX = document.documentElement.dataset.scrollX || 0;
                    var scrollY = document.documentElement.dataset.scrollY || 0;
                    window.scrollTo(scrollX, scrollY);
                });
            }

            function generate() {
                window.URL = window.URL || window.webkitURL;
                window.open(window.URL.createObjectURL(screenshotPage()));
            }
            exports.screenshotPage = screenshotPage;
            exports.generate = generate;
        })(window);
        <%= action %>
    </script>

</body>